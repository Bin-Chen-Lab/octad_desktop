pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
pbmc <- JackStraw(pbmc, num.replicate = 100)
JackStrawPlot(pbmc, dims = 1:15)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
JackStrawPlot(pbmc, dims = 1:15)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
head(Idents(pbmc), 5)
pbmc <- RunUMAP(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "umap")
cluster1.markers <- FindMarkers(pbmc, ident.1 = 1, min.pct = 0.25)
head(cluster1.markers, n = 5)
cluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25)
VlnPlot(pbmc, features = c("TROP2", "CD4"))
VlnPlot(pbmc, features = c("
TACSTD2", "CD4"))
grepl('TROP',row.names(data))
row.names(data)[grepl('TROP',row.names(data))]
row.names(data)[grepl('TACST',row.names(data))]
VlnPlot(pbmc, features = c("TACSTD2", "CD4"))
DimPlot(pbmc, reduction = "umap")
VlnPlot(pbmc, features = c("TACSTD2", "CD4"))
FeaturePlot(pbmc, features = c("TACSTD2", "CD4",
"CD8A"))
FeaturePlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"CD8A"))
new.cluster.ids <- c("Naive CD4 T", "Memory CD4 T", "CD14+ Mono", "B", "CD8 T", "FCGR3A+ Mono",
"NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
FeaturePlot(pbmc, features = c("TACSTD2", "CD4", 'AMBP'
"CD8A"))
FeaturePlot(pbmc, features = c("TACSTD2", "CD4", 'AMBP',
"CD8A"))
data=read.table('GSE149614_HCC.scRNAseq.S71915.count.txt')
data=read.table('GSE149614_HCC.scRNAseq.S71915.count.txt')
sample_names=colnames(data)
library(splitstackshape)
install.packages('splitstackshape')
library(splitstackshape)
sample_names=data.frame(colnames=colnames(data))
sample_names=cSplit(sample_names,'colnames','_')
colnames(sample_names)=c('Sample','Barcode')
sample_names$colnames=colnames(data)
sample_names=as.data.frame(sample_names)
tumor=colnames(data)[grepl('T_',colnames(data))]
healthy=colnames(data)[grepl('N_',colnames(data))]
tumor
healthy_data=data[healthy]
dim(tumor_data)
tumor_data=data[tumor]
dim(tumor_data)
hcc10k <- CreateSeuratObject(counts = tumor_data, project = "tumor_data", min.cells = 3, min.features = 200)
pbmc=hcc10k
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(hcc10k, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(hcc10k, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))
CombinePlots(plots = list(plot1, plot2))
pdf('Over_expressed_features.pdf')
CombinePlots(plots = list(plot1, plot2))
dev.off()
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
pdf('PCA.pdf')
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
dev.off()
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
JackStrawPlot(pbmc, dims = 1:15)
ElbowPlot(pbmc)
pdf('Optimality_of_PCs.pdf')
JackStrawPlot(pbmc, dims = 1:15)
ElbowPlot(pbmc)
dev.off()
JackStrawPlot(pbmc, dims = 1:15)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
head(Idents(pbmc), 5)
pbmc <- RunUMAP(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "umap")
pdf('UMAP.pdf')
DimPlot(pbmc, reduction = "umap")
dev.off()
FeaturePlot(pbmc, features = c("TACSTD2", "CD4", 'AMBP',
"CD8A",'PDL1'))
FeaturePlot(pbmc, features = c("TACSTD2", "CD4", 'AMBP',
"CD8A",'PDL-1'))
FeaturePlot(pbmc, features = c("TACSTD2", "CD4", 'AMBP',
"CD8A",'PDL_1'))
FeaturePlot(pbmc, features = c("TACSTD2", "CD4", 'AMBP',
"CD8A",'PD-L1'))
FeaturePlot(pbmc, features = c("TACSTD2", "CD4", 'AMBP',
"CD8A",'CD274'))
FeaturePlot(pbmc, features = c("GPC3", "CD4", 'AMBP',
"CD8A",'CD274'))
FeaturePlot(pbmc, features = c("GPC3", "CD4", 'AMBP'))
FeaturePlot(pbmc, features = c("GPC3", 'AMBP'))
FeaturePlot(pbmc, features = c("GPC3", 'AMBP','HMMR'))
list.files()
data=read.table('GSE149614_HCC.scRNAseq.S71915.normalized.txt')
sample_names=colnames(data)
library(splitstackshape)
sample_names=data.frame(colnames=colnames(data))
sample_names=cSplit(sample_names,'colnames','_')
colnames(sample_names)=c('Sample','Barcode')
sample_names$colnames=colnames(data)
sample_names=as.data.frame(sample_names)
tumor=colnames(data)[grepl('T_',colnames(data))]
healthy=colnames(data)[grepl('N_',colnames(data))]
tumor_data=data[tumor]
healthy_data=data[healthy]
# Initialize the Seurat object with the raw (non-normalized data).
hcc10k <- CreateSeuratObject(counts = tumor_data, project = "hcc10k", min.cells = 3, min.features = 200)
rm(pbmc)
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = tumor_data, project = "hcc10k", min.cells = 3, min.features = 200)
rm(hcc10k)
data=read.table('GSE149614_HCC.scRNAseq.S71915.normalized.txt')
sample_names=colnames(data)
library(splitstackshape)
sample_names=data.frame(colnames=colnames(data))
sample_names=cSplit(sample_names,'colnames','_')
colnames(sample_names)=c('Sample','Barcode')
sample_names$colnames=colnames(data)
sample_names=as.data.frame(sample_names)
tumor=colnames(data)[grepl('T_',colnames(data))]
healthy=colnames(data)[grepl('N_',colnames(data))]
tumor_data=data[tumor]
healthy_data=data[healthy]
rm(data)
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = tumor_data, project = "hcc10k", min.cells = 3, min.features = 200)
library(Seurat)
library(dplyr)
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = tumor_data, project = "hcc10k", min.cells = 3, min.features = 200)
write.table(tumor_data,file='tumor_data_all_norm.txt')
write.table(healthy_data,file='healthy_data_norm.txt')
data=read.table('tumor_data_all_norm.txt',header=T)
library(dplyr)
library(Seurrat)
library(Seurat)
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = data, project = "hcc10k", min.cells = 3, min.features = 200)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(hcc10k, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 20)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))
pdf('Over_expressed_features.pdf')
CombinePlots(plots = list(plot1, plot2))
dev.off()
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
pdf('PCA.pdf')
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
dev.off()
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
pdf('Optimality_of_PCs.pdf')
JackStrawPlot(pbmc, dims = 1:15)
ElbowPlot(pbmc)
JackStrawPlot(pbmc, dims = 1:15)
ElbowPlot(pbmc)
dev.off()
JackStrawPlot(pbmc, dims = 1:15)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
head(Idents(pbmc), 5)
FeaturePlot(pbmc, features = c("GPC3", "CD4", 'AMBP',
"CD8A",'HMMR'))
DimPlot(pbmc, reduction = "umap")
pbmc <- RunUMAP(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "umap")
pdf('UMAP.pdf')
DimPlot(pbmc, reduction = "umap")
dev.off()
FeaturePlot(pbmc, features = c("GPC3", "CD4", 'AMBP',
"CD8A",'HMMR'))
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','HRG','PLG','HMMR','RTP3'))
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','HRG','PLG','HMMR','RTP3','AMGPTL3'))
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','HRG','PLG','HMMR','RTP3','ANGPTL3'))
pdf('tumor_markers.pdf',width=21)
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','HRG','PLG','HMMR','RTP3','ANGPTL3'))
"CD8A",'HMMR'))
dev.off()
pdf('tumor_markers.pdf',width=21,height=7)
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','HRG','PLG','HMMR','RTP3','ANGPTL3'))
"CD8A",'HMMR'))
dev.off()
pdf('tumor_markers.pdf',width=21,height=21)
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','HRG','PLG','HMMR','RTP3','ANGPTL3'))
"CD8A",'HMMR'))
dev.off()
pdf('tumor_markers.pdf')
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','HRG','PLG','HMMR','RTP3','ANGPTL3'))
"CD8A",'HMMR'))
dev.off()
pdf('tumor_markers.pdf',height=10,width=10)
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','HRG','PLG','HMMR','RTP3','ANGPTL3'))
"CD8A",'HMMR'))
dev.off()
pdf('tumor_markers.pdf',height=14,width=14)
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','HRG','PLG','HMMR','RTP3','ANGPTL3'))
"CD8A",'HMMR'))
dev.off()
data=read.table('healthy_data_all_norm.txt',header=T)
data=read.table('healthy_data_norm.txt',header=T)
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','PLG','HMMR','ANGPTL3','CD4','CD8','CCL3'))
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','PLG','HMMR','ANGPTL3','CD4','CD8A','CCL3'))
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','PLG','ANGPTL3','CD4','CD8A','CCL3'))
pdf('tumor_markers_tumor.pdf',height=14,width=14)
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','PLG','ANGPTL3','CD4','CD8A','CCL3'))
dev.off()
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = data, project = "hcc10k", min.cells = 3, min.features = 200)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
pbmc <- CreateSeuratObject(counts = data, project = "hcc10k", min.cells = 3, min.features = 200)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 20)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
pdf('Over_expressed_features_healthy.pdf')
CombinePlots(plots = list(plot1, plot2))
dev.off()
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
pdf('PCA_healthy.pdf')
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
dev.off()
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
pdf('Optimality_of_PCs_healthy.pdf')
JackStrawPlot(pbmc, dims = 1:15)
ElbowPlot(pbmc)
dev.off()
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
head(Idents(pbmc), 5)
pbmc <- RunUMAP(pbmc, dims = 1:10)
pdf('UMAP_healthy_healthy.pdf')
DimPlot(pbmc, reduction = "umap")
dev.off()
cluster1.markers <- FindMarkers(pbmc, ident.1 = 1, min.pct = 0.25)
head(cluster1.markers, n = 5)
cluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25)
head(cluster5.markers, n = 5)
VlnPlot(pbmc, features = c("TACSTD2", "CD4"))
VlnPlot(pbmc, features = c("NKG7", "PF4"), slot = "counts", log = TRUE)
pdf('tumor_markers_healthy.pdf',height=14,width=14)
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','PLG','ANGPTL3','CD4','CD8A','CCL3'))
"CD8A",'HMMR'))
dev.off()
FeaturePlot(pbmc, features = c("GPC3", "MBL2", 'AMBP','APOH','PLG','ANGPTL3','CD4','CD8A','CCL3'))
FeaturePlot(pbmc, features = c("GPC3", 'AMBP','CCR7','S100A4','CD14','MS4A1','CD8A','FCGR3A','GNLY'))
pdf('tumor_markers_healthy_CD_markers.pdf',height=14,width=14)
FeaturePlot(pbmc, features = c("GPC3", 'AMBP','CCR7','S100A4','CD14','MS4A1','CD8A','FCGR3A','GNLY'))
"CD8A",'HMMR'))
dev.off()
data=read.table('tumor_data_all_norm.txt',header=T)
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = data, project = "hcc10k", min.cells = 3, min.features = 200)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 20)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
head(Idents(pbmc), 5)
pbmc <- RunUMAP(pbmc, dims = 1:10)
VlnPlot(pbmc, features = c("TACSTD2", "CD4"))
VlnPlot(pbmc, features = c("NKG7", "PF4"), slot = "counts", log = TRUE)
pdf('tumor_markers_tumor_CD_markers.pdf',height=14,width=14)
FeaturePlot(pbmc, features = c("GPC3", 'AMBP','CCR7','S100A4','CD14','MS4A1','CD8A','FCGR3A','GNLY'))
"CD8A",'HMMR'))
dev.off()
FeaturePlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"CD8A"))
data=read.table('tumor_data_all_norm.txt',header=T)
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = data, project = "hcc10k", min.cells = 3, min.features = 200)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 20)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
head(Idents(pbmc), 5)
pbmc <- RunUMAP(pbmc, dims = 1:10)
pdf('tumor_markers_CD_markers_tumor.pdf',height=14,width=14)
FeaturePlot(pbmc, features = c("GPC3", 'AMBP','CCR7','S100A4','CD14','MS4A1','CD8A','FCGR3A','GNLY'))
dev.off()
FeaturePlot(pbmc, features = c("GPC3", 'AMBP','CCR7','S100A4','CD14','MS4A1','CD8A','FCGR3A','GNLY'))
data=read.table('healthy_data_norm.txt')
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = data, project = "hcc10k", min.cells = 3, min.features = 200)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
setwd('D:/Dropbox/Scripts/binchen/octad_package/octad/R')
BIC_with_PIK3_primary=subset(phenoDF,cancer=='breast invasive carcinoma'&sample.type == 'primary'&grepl('PIK3CA',mutation_list))
library(octad)
BIC_with_PIK3_primary=subset(phenoDF,cancer=='breast invasive carcinoma'&sample.type == 'primary'&grepl('PIK3CA',mutation_list))
head(BIC_with_PIK3_primary)
case_id=BIC_with_PIK3_primary$sample.id
adjacent=FALSE
source='octad'
n_varGenes = 500
method='varGenes'
control_size = length(case_id
outputFolder='
outputFolder=''
cor_cutoff='0
output=TRUE
expSet_normal <- expSet[,as.vector(normal_id)]
cor_cutoff='0'
expSet_normal <- expSet[,as.vector(normal_id)]
expSet=octad.db::EncoderDF
expSet_normal <- expSet[,as.vector(normal_id)]
#load autoencoder dataset as ExpSet
#load('data/EncoderDF.rda')
normal_id = as.vector(subset(octad.db::phenoDF,sample.type == "normal")$sample.id)
expSet_normal <- expSet[,as.vector(normal_id)]
expSet_case <- expSet[,as.vector(case_id)]
#varGenes look at the top varying genes (IQR) within normal tissue expression and varies them to the case tissues
iqr_gene <-apply(expSet_normal, 1, stats::IQR) #get the IQR per gene
varying_genes <-order(iqr_gene, decreasing=TRUE)[1:min(n_varGenes,length(iqr_gene))]
#get the correlation matrix for each normal id and each case id
normal_dz_cor <-cor(expSet_normal[varying_genes, ], expSet_case[varying_genes, ], method = "spearman")
normal_dz_cor_each <-apply(normal_dz_cor, 1, median) #getting the median correlation btw each normal tissue to the case overall
normal_dz_cor_eachDF = data.frame(cor=sort(normal_dz_cor_each, decreasing=TRUE)) %>%
dplyr::mutate(sample.id = row.names(.)) %>% dplyr::select(sample.id,cor)
cutoff = stats::quantile(normal_dz_cor_eachDF$cor,probs=seq(0,1,0.05),na.rm=TRUE)[cor_cutoff]
GTEXid <- (normal_dz_cor_eachDF %>%
dplyr::arrange(desc(cor)) %>%
dplyr::filter(cor>=cutoff))$sample.id
GTEXid
cor
cutoff
cutoff = stats::quantile(normal_dz_cor_eachDF$cor,probs=seq(0,1,0.05),na.rm=TRUE)[cor_cutoff]
normal_dz_cor_eachDF
cutoff
cor_cutoff
stats::quantile(normal_dz_cor_eachDF$cor,probs=seq(0,1,0.05),na.rm=TRUE)
cutoff = stats::quantile(normal_dz_cor_eachDF$cor,probs=seq(0,1,0.05),na.rm=TRUE)[paste0(cor_cutoff,'%')]
cutoff
cor
normal_dz_cor_eachDF
GTEXid_temp <- subset(normal_dz_cor_eachDF,cor>=cutoff)
GTEXid_temp
cutoff
desc(cor)
GTEXid <- (normal_dz_cor_eachDF %>%
dplyr::arrange(desc(cor)) %>%
dplyr::filter(cor>=cutoff))$sample.id
GTEXid
normal_dz_cor_eachDF %>%
dplyr::arrange(desc(cor)) %>%
dplyr::filter(cor>=cutoff))
(normal_dz_cor_eachDF %>%
dplyr::arrange(desc(cor)) %>%
dplyr::filter(cor>=cutoff))
GTEXid_temp <- subset(normal_dz_cor_eachDF, cor>=cutoff)
GTEXid_temp
GTEXid_temp=GTEXid_temp[order(GTEXid_temp$cor),]
GTEXid_temp
GTEXid_temp <- subset(normal_dz_cor_eachDF, cor>=cutoff)
GTEXid_temp=GTEXid_temp[order(GTEXid_temp$cor),]
GTEXid_temp
cutoff
cor_cutoff=20
cutoff = stats::quantile(normal_dz_cor_eachDF$cor,probs=seq(0,1,0.05),na.rm=TRUE)[paste0(cor_cutoff,'%')]
cutoff
GTEXid_temp <- subset(normal_dz_cor_eachDF, cor>=cutoff)
GTEXid_temp=GTEXid_temp[order(GTEXid_temp$cor),]
GTEXid_temp
normal_dz_cor_eachDF
?order
?order
min(control_size,length(GTEXid))
control_size = length(case_id)
seq_along(10)
seq_len(10)
devtools::document('octad')
getwd()
setwd('../..')
getwd()
devtools::document('octad')
BiocCheck('octad')
library('BiocCheck')
BiocCheck('octad')
devtools::document('octad')
library(octad)
detach("package:octad", unload = TRUE)
detach("package:octad.db", unload = TRUE)
setwd('octad_bioconductor')
library(usethis)
